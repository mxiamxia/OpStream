name: DeployAndSoakingEC2

on:
  push:
    branches:
      - master
    paths:
      - 'appointment-service/**'
  workflow_dispatch:

jobs:
  deploy-and-soak-ec2:
    runs-on: ubuntu-latest
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      INSTANCE_ID: i-0a0dc457cbc683c4c
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Deploy to existing EC2 instance
        run: |
          echo "Step 1: Stop existing applications"
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["pkill -f python3 || true","pkill -f curl || true"]' \
            --output text \
            --query 'Command.CommandId' > cmd1.txt
          
          COMMAND_ID1=$(cat cmd1.txt)
          aws ssm wait command-executed --command-id $COMMAND_ID1 --instance-id $INSTANCE_ID
          
          echo "Step 2: Update code repository"
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["cd /home/ec2-user","if [ ! -d OpStream ]; then git clone https://github.com/mxiamxia/OpStream.git; fi","cd OpStream","git fetch origin","git reset --hard origin/master"]' \
            --output text \
            --query 'Command.CommandId' > cmd2.txt
          
          COMMAND_ID2=$(cat cmd2.txt)
          aws ssm wait command-executed --command-id $COMMAND_ID2 --instance-id $INSTANCE_ID
          
          echo "Step 3: Install dependencies"
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["cd /home/ec2-user/OpStream/appointment-service","pip3 install -r requirements.txt"]' \
            --output text \
            --query 'Command.CommandId' > cmd3.txt
          
          COMMAND_ID3=$(cat cmd3.txt)
          aws ssm wait command-executed --command-id $COMMAND_ID3 --instance-id $INSTANCE_ID
          
          echo "Step 4: Start application"
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["cd /home/ec2-user/OpStream/appointment-service","export OTEL_PYTHON_DISTRO=aws_distro","export OTEL_TRACES_EXPORTER=none","export OTEL_LOGS_EXPORTER=none","export OTEL_METRICS_EXPORTER=awsemf","export OTEL_PYTHON_CONFIGURATOR=aws_configurator","export OTEL_EXPORTER_OTLP_LOGS_HEADERS=\"x-aws-log-group=hackathon-apm,x-aws-log-stream=default,x-aws-metric-namespace=hackathon-apm\"","export OTEL_RESOURCE_ATTRIBUTES=\"service.name=AppointmentService,aws.log.group.names=hackathon-apm\"","nohup opentelemetry-instrument python3 app.py > app.log 2>&1 &","sleep 5"]' \
            --output text \
            --query 'Command.CommandId' > cmd4.txt
          
          COMMAND_ID4=$(cat cmd4.txt)
          aws ssm wait command-executed --command-id $COMMAND_ID4 --instance-id $INSTANCE_ID
          
          echo "Step 5: Start continuous traffic generation"
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["cd /home/ec2-user/OpStream/appointment-service","chmod +x curl_examples.sh","cat > continuous_traffic.sh << \"EOF\"","#!/bin/bash","while true; do","  ./curl_examples.sh","  echo \"Traffic batch completed, starting next batch...\"","  sleep 1","done","EOF","chmod +x continuous_traffic.sh","nohup ./continuous_traffic.sh > traffic.log 2>&1 &","echo \"Continuous traffic generation started\""]' \
            --output text \
            --query 'Command.CommandId' > cmd5.txt
          
          COMMAND_ID5=$(cat cmd5.txt)
          aws ssm wait command-executed --command-id $COMMAND_ID5 --instance-id $INSTANCE_ID
          
          echo "Step 6: Get initial application logs"
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["cd /home/ec2-user/OpStream/appointment-service","echo \"=== Application Logs ====\"","tail -50 app.log","echo \"=== Traffic Logs ====\"","tail -20 traffic.log","echo \"=== End of Logs ====\""]' \
            --output text \
            --query 'Command.CommandId' > cmd6.txt
          
          COMMAND_ID6=$(cat cmd6.txt)
          aws ssm wait command-executed --command-id $COMMAND_ID6 --instance-id $INSTANCE_ID
          
          echo "Getting deployment logs..."
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID6 \
            --instance-id $INSTANCE_ID \
            --query 'StandardOutputContent' \
            --output text
          
          echo "Deployment completed successfully. Application and traffic generation are running continuously on EC2."